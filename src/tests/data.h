/*
 * Generated : 12-08-2020 23:25:18.00000
 * ----------------------------------------------------------
 * This file is generated by gen_test_header.py script. Don't edit directly.
*/

#include <vector>
#include <string>
#include <cstdint>

std::vector<uint32_t> test1 = {0x80000090, 0xe0000000, 0x80000050, 0x2, 0x80000050, 0x6, 0x80000001, 0x80000050, 0x4, 0x80000003, 0x80000050, 0xa, 0x80000005, 0x80000050, 0x2, 0x80000009, 0x80000050, 0x0, 0x80000007, 0x80000050, 0xa, 0x8000000b, 0x80000050, 0x0, 0x8000000d, 0x80000050, 0x63, 0x80000001, 0x80000050, 0x2, 0x80000010, 0x80000050, 0x19, 0x80000009, 0x80000050, 0x1, 0x8000000a, 0x80000050, 0x0, 0x8000000c, 0x80000050, 0x2, 0x8000000e, 0x80000050, 0x14, 0x80000001, 0x80000050, 0x5, 0x80000002, 0x80000050, 0xf, 0x80000006, 0x80000050, 0xa, 0x80000008, 0x80000050, 0x2, 0x8000000f, 0x80000011, 0xc00000f3, 0x80000012, 0xc00000f3, 0x80000000};
std::vector<uint32_t> test2 = {0x80000090, 0xe0000000, 0x80000050, 0x5, 0x80000050, 0x7, 0x80000050, 0xf, 0x80000053, 0xc0000001, 0x3, 0x80000001, 0x80000003, 0x80000053, 0xc0000001, 0xc0000003, 0x80000050, 0xc0000001, 0x80000050, 0x60000002, 0x80000050, 0x9, 0x80000001, 0x80000001, 0x80000004, 0x80000053, 0xc0000002, 0xc00000f3, 0x80000050, 0x5, 0x80000050, 0xc0000002, 0x80000003, 0x80000052, 0x5, 0x80000050, 0xc0000001, 0x80000004, 0x80000052, 0x2, 0x80000053, 0x60000001, 0x32, 0x80000001, 0x80000000};
std::vector<uint32_t> test3 = {0x80000090, 0xe0000000, 0x80000050, 0x1e, 0x80000050, 0x14, 0x80000050, 0xa, 0x80000052, 0xc00000f3, 0x80000001, 0x80000004, 0x80000050, 0xc0000001, 0x80000001, 0x80000052, 0x60000001, 0x80000050, 0xc0000001, 0x80000001, 0x80000053, 0xc0000001, 0xc00000f3, 0x80000050, 0xc0000001, 0x80000009, 0x80000053, 0xc0000001, 0xa, 0x80000050, 0xc0000001, 0x80000001, 0x80000000};
std::vector<uint32_t> test4 = {0x80000090, 0xe0000010, 0x80000053, 0xc0000002, 0x40000001, 0x80000050, 0x2, 0x80000053, 0xc0000001, 0x1, 0x80000050, 0x1, 0x80000050, 0xc0000001, 0x80000001, 0x80000050, 0xc00000f3, 0x80000050, 0xc0000001, 0x80000002, 0x80000053, 0xc0000001, 0xc00000f3, 0x80000051, 0x80000050, 0x60000001, 0x80000050, 0x1, 0x80000001, 0x80000053, 0x60000001, 0xc00000f3, 0x80000050, 0xc0000002, 0x80000009, 0x80000055, 0xc, 0x80000053, 0xc0000001, 0xc00000f3, 0x80000051, 0x80000051, 0x80000091, 0x80000090, 0xe0000000, 0x80000050, 0x18, 0x80000092, 0xe0000010, 0x80000051, 0x80000050, 0xc0000001, 0x80000000};
std::vector<uint32_t> test5 = {0x80000090, 0xe0000000, 0x80000053, 0xc0000001, 0xa, 0x80000050, 0x1, 0x80000050, 0xa, 0x80000050, 0xa, 0x80000001, 0x80000050, 0x60000001, 0x80000050, 0x1, 0x80000001, 0x80000053, 0x60000001, 0xc00000f3, 0x80000050, 0xc0000001, 0x80000009, 0x80000055, 0x9, 0x80000000};
std::vector<uint32_t> test6 = {0x80000090, 0xe0000010, 0x80000052, 0xa, 0x80000091, 0x80000090, 0xe0000000, 0x80000092, 0xe0000010, 0x80000050, 0xc0000001, 0x80000000};
std::vector<uint32_t> test7 = {0x80000090, 0xe0000010, 0x80000050, 0x40000001, 0x80000050, 0x40000002, 0x80000050, 0x60000002, 0x80000093, 0xe0000020, 0x80000050, 0x60000002, 0x80000003, 0x80000012, 0x60000001, 0x80000050, 0x60000001, 0x80000056, 0xe0000020, 0x80000053, 0xc0000001, 0xc00000f3, 0x80000051, 0x80000051, 0x80000051, 0x80000091, 0x80000090, 0xe0000000, 0x80000050, 0x6, 0x80000050, 0x5, 0x80000092, 0xe0000010, 0x80000051, 0x80000051, 0x80000050, 0xc0000001, 0x80000000};

//-----basm strings-----

std::string test1_asm = 
	"//; arithmetic, logic test\n"
	"//; tos : 40\n"
	".main:\n"
	"    push 2\n"
	"    push 6\n"
	"    add\n"
	"    push 4\n"
	"    mul\n"
	"    push 10 \n"
	"    mod\n"
	"    push 2\n"
	"    eq\n"
	"    push 0\n"
	"    xor\n"
	"    push 10\n"
	"    lt\n"
	"    push 0\n"
	"    gt\n"
	"    push 99\n"
	"    add\n"
	"    push 2\n"
	"    shr\n"
	"    push 25\n"
	"    eq\n"
	"    push 1\n"
	"    ne\n"
	"    push 0\n"
	"    le\n"
	"    push 2\n"
	"    ge      //; sp = 0\n"
	"    push 20\n"
	"    add     //; sp = 20\n"
	"    push 5 \n"
	"    sub\n"
	"    push 15\n"
	"    or      //; 15 | 15 = sp = 15\n"
	"    push 10 \n"
	"    and\n"
	"    push 2\n"
	"    shl     //; 1010 << 2 -> 101000 -> 40\n"
	"    inc [sp]\n"
	"    dec [sp]\n"
	"    end     //; tos : 40\n";
std::string test2_asm = 
	"//; register/address referencing test 1\n"
	"//; tos : 60\n"
	".main:\n"
	"    push 5\n"
	"    push 7\n"
	"    push 15\n"
	"    mov ax 3     //; set ax to 3\n"
	"    add          //; add 15 to 7 write to sp - 1 -> 22\n"
	"    mul          //; multiply 5 by 22 write to sp - 1 -> 110\n"
	"    mov ax sp    //; copy sp to ax -> ax = 1\n"
	"    push ax\n"
	"    push [2]     //; push Mem[2] to stack (which is 1)\n"
	"    push 9\n"
	"    add\n"
	"    add\n"
	"    div          //; multiply 1 by 10\n"
	"    mov bx [sp]\n"
	"    push 5\n"
	"    push bx\n"
	"    mul\n"
	"    load 5\n"
	"    push ax \n"
	"    div\n"
	"    load 2\n"
	"    mov [1] 50\n"
	"    add \n"
	"    end          //; tos : 60\n";
std::string test3_asm = 
	"//; register/address referencing test 2\n"
	"//; tos : 11\n"
	".main:\n"
	"    push 30\n"
	"    push 20\n"
	"    push 10\n"
	"    load [sp]   //; mov ax [sp] -> ax = 10\n"
	"    add         //; sp = 20 + 10 -> 30\n"
	"    div         //; sp = 30 / 30 -> 1\n"
	"    push ax     //; sp = ax -> 10\n"
	"    add         //; sp = 1 + 10\n"
	"    load [1]    //; ax = sp[1] -> sp -> 11\n"
	"    push ax     //; sp = 11\n"
	"    add         //; sp = 11 + 11 -> 22\n"
	"    mov ax [sp] //; ax = 22\n"
	"    push ax     //; sp = 22\n"
	"    eq          //; sp = 22 == 22\n"
	"    mov ax 10   //; ax = 10\n"
	"    push ax     //; sp = 10\n"
	"    add         //; sp = 1 + 10\n"
	"    end         //; tos : 11\n";
std::string test4_asm = 
	"//; fibonacci(n) function, bengi-asm\n"
	".fib:\n"
	"    mov bx [-1]     //; copy func. argument to BX\n"
	"                    //; as loop stop variable\n"
	"\n"
	"    push 2          //; loop var\n"
	"    mov ax 1\n"
	"    push 1\n"
	"                    //; loop start\n"
	"    push ax\n"
	"    add\n"
	"    push [sp]\n"
	"    push ax\n"
	"    sub \n"
	"    mov ax [sp]\n"
	"    pop\n"
	"                    //; loop var += 1\n"
	"    push [1]\n"
	"    push 1\n"
	"    add\n"
	"                    //; copy loop var\n"
	"    mov [1] [sp]\n"
	"                    //; check if loop var == loop stop var\n"
	"    push bx      \n"
	"    eq\n"
	"    jz 12           //; jump to loop start instruction (push ax)\n"
	"                    //; and pop stack\n"
	"                    //; loop end\n"
	"\n"
	"    mov ax [sp]     //; write return value to AX\n"
	"    pop             //; remove function locals\n"
	"    pop\n"
	"    ret             //; return \n"
	"\n"
	".main:\n"
	"    push 24         //; push 20 as function argument\n"
	"    call fib        //; call fibonacci function\n"
	"    pop             //; remove function argument\n"
	"    push ax         //; push function return value\n"
	"    end             //; end program\n"
	"\n";
std::string test5_asm = 
	".main:\n"
	"    mov ax 10    //; loop stop\n"
	"    push 1       //; loop variable\n"
	"    push 10 \n"
	"                 //; loop start\n"
	"    push 10\n"
	"    add\n"
	"    push [1]     //;+ add 1 to loop var\n"
	"    push 1\n"
	"    add             \n"
	"    mov [1] [sp] //;+ store loop var\n"
	"    push ax      //;+ compare loop var to 10\n"
	"    eq           //;+ once loop var hit 10 it will get out of the loop\n"
	"    jz 9    \n"
	"                 //; loop end\n"
	"    end          //; tos: 100\n";
std::string test6_asm = 
	"//; function calling test 1\n"
	".test:\n"
	"    load 10\n"
	"    ret\n"
	"\n"
	".main:\n"
	"    call test\n"
	"    push ax\n"
	"    end\n";
std::string test7_asm = 
	"//; labeling test (pow function implementation)\n"
	".pow:\n"
	"    push [-1]\n"
	"    push [-2]\n"
	"\n"
	"    push [2]\n"
	"\n"
	"    test_label:\n"
	"    push [2]\n"
	"    mul\n"
	"\n"
	"    dec [1]\n"
	"    push [1]\n"
	"    jnz test_label\n"
	"\n"
	"    mov ax [sp]\n"
	"    pop\n"
	"    pop\n"
	"    pop\n"
	"    ret\n"
	"\n"
	".main:\n"
	"    //; we want 6^5\n"
	"    push 6\n"
	"    push 5\n"
	"\n"
	"    call pow\n"
	"\n"
	"    //; remove func args    \n"
	"    pop\n"
	"    pop\n"
	"\n"
	"    //;push ret val\n"
	"    push ax\n"
	"\n"
	"    end\n";

extern std::vector<uint32_t> test1;
extern std::vector<uint32_t> test2;
extern std::vector<uint32_t> test3;
extern std::vector<uint32_t> test4;
extern std::vector<uint32_t> test5;
extern std::vector<uint32_t> test6;
extern std::vector<uint32_t> test7;
extern std::string test1_asm;
extern std::string test2_asm;
extern std::string test3_asm;
extern std::string test4_asm;
extern std::string test5_asm;
extern std::string test6_asm;
extern std::string test7_asm;
